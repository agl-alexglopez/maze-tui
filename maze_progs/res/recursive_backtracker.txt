│ _____                          _           
│|  __ \                        (_)
│| |__) |___  ___ _   _ _ __ ___ ___   _____ 
│|  _  // _ \/ __| | | | '__/ __| \ \ / / _ \
│| | \ \  __/ (__| |_| | |  \__ \ |\ V /  __/
│|_|  \_\___|\___|\__,_|_|  |___/_| \_/ \___|                                          
│ ____             _    _                  _             
│|  _ \           | |  | |                | |            
│| |_) | __ _  ___| | _| |_ _ __ __ _  ___| | _____ _ __ 
│|  _ < / _` |/ __| |/ / __| '__/ _` |/ __| |/ / _ \ '__|
│| |_) | (_| | (__|   <| |_| | | (_| | (__|   <  __/ |   
│|____/ \__,_|\___|_|\_\\__|_|  \__,_|\___|_|\_\___|_|

(scroll with <↓>/<↑>, toggle info <i>)

This is the classic maze building algorithm. It works by randomly carving out valid walls into passages until it can no longer progress down its current branch. Then it takes one step back and repeats the process for as long as possible until it arrives back at the origin.

There are some special ways to optimize this algorithm, including the ability to only use O(1) auxiliaray space. The bits of the maze itself are sufficient to keep track of our backtracking. In fact, if you watch the animated version of this algorithm, you will see the illustrations of those backtracking bits as color coded arrows; the arrows signify which direction we need to go to return the way we came. 

Here is generalized pseudocode for the recursive backtracking algorithm.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

mark a random starting point as the origin of all paths

while there are valid maze paths to carve

┈┈┈┈mark the current square as visited
    
┈┈┈┈for every neighboring square divided by a wall in random order
	
┈┈┈┈┈┈┈┈if the neighbor is valid and not seen

┈┈┈┈┈┈┈┈┈┈┈┈break the wall between current and neighbor

┈┈┈┈┈┈┈┈┈┈┈┈mark neighbor with the direction you came from
			
┈┈┈┈┈┈┈┈┈┈┈┈current becomes next 

┈┈┈┈┈┈┈┈┈┈┈┈continue the outer while loop

┈┈┈┈if we are not at the origin
	
┈┈┈┈┈┈┈┈backtrack to the previous square

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
